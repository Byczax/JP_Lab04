package data.gui.manager;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import data.dao.SurveyDAO;
import data.models.Survey;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import java.awt.*;

import static data.gui.Gui.*;

public class ManagerSurveysGui {
    private JPanel mainSurveyPanel;
    private JButton editButton;
    private JButton deleteButton;
    private JTable surveyTable;
    private JTextArea surveyDescription;
    private JButton addButton;
    private JButton clearButton;
    private JTextField surveyName;
    private JButton addFieldsButton;
    private SurveyDAO surveyDAO = new SurveyDAO();

    JFrame FieldFrame = new JFrame();

    public ManagerSurveysGui() {
        clearButton.addActionListener(e -> {
            surveyName.setText("");
            surveyDescription.setText("");
        });
        addButton.addActionListener(e -> {
            boolean exist = existsInTable(surveyTable, surveyName.getText());
            if (exist) {
                JOptionPane.showMessageDialog(null, "Name exist, write new name");
                surveyName.setText("");
                return;
            }
            addToTable(surveyTable, surveyName.getText(), surveyDescription.getText());
            surveyDAO.add(new Survey(surveyName.getText(), surveyDescription.getText()));
            surveyName.setText("");
            surveyDescription.setText("");
            JOptionPane.showMessageDialog(null, "Added to table");
        });
        editButton.addActionListener(e -> {
            boolean exist = true;
            int id = surveyTable.getSelectedRow();
            String oldName = surveyTable.getValueAt(id, 0).toString();
            var newName =
                    JOptionPane.showInputDialog(null,
                            "Write new name",
                            "New name",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            null,
                            surveyTable.getValueAt(id, 0).toString()).toString();
            while (exist) {
                exist = existsInTable(surveyTable, newName);
                if (exist) {
                    newName =
                            JOptionPane.showInputDialog(null,
                                    "Name exist, write new name",
                                    "New name",
                                    JOptionPane.PLAIN_MESSAGE,
                                    null,
                                    null,
                                    surveyTable.getValueAt(id, 0).toString()).toString();
                }
            }
            var newDescription = JOptionPane.showInputDialog(null,
                    "Write new description",
                    "New description",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    surveyTable.getValueAt(id, 1).toString()).toString();

            editTable(surveyTable, newName, newDescription, id);
            String[] newData = {newName, newDescription};
            surveyDAO.update(oldName, newData);
            JOptionPane.showMessageDialog(null, "Data edited.");
        });
        deleteButton.addActionListener(e -> {
            int id = surveyTable.getSelectedRow();
            surveyDAO.delete(surveyTable.getValueAt(id, 0).toString());
            removeFromTable(surveyTable, id);
            JOptionPane.showMessageDialog(null, "Removed from table");
        });

        addFieldsButton.addActionListener(e -> {
            ManagerFieldsGui managerGui = new ManagerFieldsGui();
            int selectedRow = surveyTable.getSelectedRow();
            String surveyName = surveyTable.getValueAt(selectedRow, 0).toString();
            JPanel root = managerGui.getFieldPanel();
            managerGui.createTable(surveyName);
            FieldFrame.setTitle("Manager Field Adding");
            FieldFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            FieldFrame.setContentPane(root);
            FieldFrame.pack();
            FieldFrame.setLocationRelativeTo(null);
            FieldFrame.setVisible(true);
        });
    }

    public JPanel getMainSurveyPanel() {
        return mainSurveyPanel;
    }

    public void createTable() {
        surveyTable.setDefaultEditor(Object.class, null);
        DefaultTableModel tableModel = new DefaultTableModel();
        tableModel.setColumnIdentifiers(new Object[]{"Name", "Description"});
        for (Survey service : surveyDAO.getAll()) {
            tableModel.addRow(new Object[]{service.getName(), service.getDescription()});
        }
        surveyTable.setModel(tableModel);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainSurveyPanel = new JPanel();
        mainSurveyPanel.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainSurveyPanel.add(panel1, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        editButton = new JButton();
        editButton.setText("edit");
        panel1.add(editButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deleteButton = new JButton();
        deleteButton.setText("delete");
        panel1.add(deleteButton, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel2.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        surveyTable = new JTable();
        scrollPane1.setViewportView(surveyTable);
        addFieldsButton = new JButton();
        addFieldsButton.setText("Add fields");
        panel1.add(addFieldsButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainSurveyPanel.add(panel3, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Survey name");
        panel3.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        surveyName = new JTextField();
        panel3.add(surveyName, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Survey Description");
        panel3.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        surveyDescription = new JTextArea();
        panel3.add(surveyDescription, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addButton = new JButton();
        addButton.setText("Add");
        panel4.add(addButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 1, false));
        clearButton = new JButton();
        clearButton.setText("Clear");
        panel4.add(clearButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("List of Surveys");
        mainSurveyPanel.add(label3, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Adding Survey");
        mainSurveyPanel.add(label4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JSeparator separator1 = new JSeparator();
        separator1.setOrientation(1);
        mainSurveyPanel.add(separator1, new GridConstraints(0, 1, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JSeparator separator2 = new JSeparator();
        mainSurveyPanel.add(separator2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JSeparator separator3 = new JSeparator();
        mainSurveyPanel.add(separator3, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainSurveyPanel;
    }
}
